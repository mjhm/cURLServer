#! /usr/bin/python

# Copyright (c) 2010 John McLaughlin - Mass Animation

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

import sys, time, os, shutil
import sys
import simplejson as json
import subprocess
import os
import jsonrpcbase
import inspect

#import cgitb
#cgitb.enable()

def ping():
    return True

def listdir():
    result = os.listdir(os.getcwd())
    return result 


def curl(*args):
    curl_path = '/usr/bin/curl'
    curl_list = [curl_path]
    for arg in args:
        # Rof loop just in case we want to filter args in future.
        curl_list.append(arg)
    curl_result = subprocess.Popen(
                 curl_list,
                 stderr=subprocess.PIPE,
                 stdout=subprocess.PIPE).communicate()[0]
    return curl_result 

def cat(*args):
    cat_list = ['cat']
    got_out = False
    out = ''
    for arg in args:
        if got_out:
            out = arg
            break
        if arg == '>':
           got_out = True
           continue
        if arg:
            cat_list.append(arg)

    cat_result = ''
    if got_out and out:
        outfd = open(out,'w')
        cat_result = subprocess.Popen( cat_list,
                 stderr=subprocess.PIPE,
                 stdout=outfd).communicate()[1]
        outfd.close()
    else:
        cat_result = subprocess.Popen( cat_list,
                 stderr=subprocess.PIPE,
                 stdout=subprocess.PIPE).communicate()[0]
    return cat_result 


def sequence(*args):
    cur_frame = inspect.currentframe()
    rpc_frame = inspect.getouterframes(cur_frame)[1][0]
    rpc_self = rpc_frame.f_locals['self']
    
    result = []
    for arg in args:
        result.append(rpc_self.call_py(json.dumps(arg)))

    return result


def rpc_service_setup():
    rpc_service = jsonrpcbase.JSONRPCService()
    rpc_service.add(ping)
    rpc_service.add(listdir)
    rpc_service.add(curl)
    rpc_service.add(cat)
    rpc_service.add(sequence)
    return rpc_service


if __name__ == '__main__':
    pass

